# name: Count Dev Branch Commits, List Messages, and Build Status

# on: 
#   schedule: 
#     - cron: '0 19 * * *'  # Runs daily at 7 PM UTC
#   push: 
#     branches: 
#       - dev

# jobs: 
#   count-commits:
#     runs-on: ubuntu-latest

#     steps: 
#       - name: Checkout code 
#         uses: actions/checkout@v3
#         with: 
#           fetch-depth: 0  # Fetch full history for all branches

#       - name: Fetch dev branch history 
#         run: |
#           git fetch origin dev
#           git checkout dev
      
#       - name: Count commits from 7 PM previous day to 7 PM today 
#         id: count_commits
#         run: |
#           echo "Counting commits on dev branch from 7 PM yesterday to 7 PM today..."
#           since=$(date --date="yesterday 19:00" +"%Y-%m-%dT%H:%M:%S")
#           until=$(date --date="today 19:00" +"%Y-%m-%dT%H:%M:%S")
#           commit_count=$(git log --since="$since" --until="$until" --pretty=format:"%an" | sort | uniq -c | sort -nr)
          
#           if [ -z "$commit_count" ]; then
#             echo "No commits were made on the dev branch between $since and $until."
#           else
#             echo "$commit_count"
#           fi
#   list-commits:
#     runs-on: ubuntu-latest
#     needs: count-commits  # Waits for the 'count-commits' job to finish

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0  # Fetch full history for all branches

#       - name: Fetch dev branch history
#         run: |
#           git fetch origin dev
#           git checkout dev
      
#       - name: List individual commits with messages
#         id: list_commits
#         run: |
#           since=$(date --date="yesterday 19:00" +"%Y-%m-%dT%H:%M:%S")
#           until=$(date --date="today 19:00" +"%Y-%m-%dT%H:%M:%S")
#           echo "Listing individual commits from $since to $until on dev branch:"
#           commits=$(git log --since="$since" --until="$until" --pretty=format:"%h - %an: %s")
          
#           if [ -z "$commits" ]; then
#             echo "No commits were made on the dev branch between $since and $until."
#           else
#             echo "$commits"
#           fi
#   build-status:
#     runs-on: ubuntu-latest
#     needs: [count-commits, list-commits]  # Waits for both previous jobs to finish

#     steps:
#       - name: Check build status from past runs
#         env:
#           GITHUB_TOKEN: ${{ secrets.TOKEN }}  # Access to GitHub API
#         run: |
#           since=$(date --date="yesterday 19:00" +"%Y-%m-%dT%H:%M:%S")
#           until=$(date --date="today 19:00" +"%Y-%m-%dT%H:%M:%S")
#           echo "Checking workflow build status from $since to $until..."
          
#           # Call the GitHub API to retrieve workflow runs
#           raw_response=$(curl -s \
#             -H "Authorization: token $GITHUB_TOKEN" \
#             "https://api.github.com/repos/me-ca/e-meca/actions/runs?branch=dev&status=completed")
#           # Filter workflow runs in the response by date range
#           workflow_runs=$(echo "$raw_response" | jq --arg since "$since" --arg until "$until" '.workflow_runs[] | select(.created_at >= $since and .created_at <= $until)')
          
#           # Check if we got any runs
#           if [ -z "$workflow_runs" ]; then
#             echo "No workflow runs found in the specified date range."
#           else
#             total_runs=$(echo "$workflow_runs" | jq '.id' | wc -l)
#             successes=$(echo "$workflow_runs" | jq '.conclusion' | grep 'success' | wc -l)
#             failures=$(echo "$workflow_runs" | jq '.conclusion' | grep 'failure' | wc -l)
          
#             echo "Total builds: $total_runs"
#             echo "Successes: $successes"
#             echo "Failures: $failures"
          
#             # Output commits that triggered successful and failed builds with authors and messages
#             echo "Build results:"
#             for run in $(echo "$workflow_runs" | jq -r '.id'); do
#               conclusion=$(echo "$workflow_runs" | jq -r ". | select(.id == $run) | .conclusion")
#               commit_sha=$(echo "$workflow_runs" | jq -r ". | select(.id == $run) | .head_sha")
              
#               # Get the commit details to fetch the author and message
#               commit_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/me-ca/e-meca/commits/$commit_sha")
#               author_name=$(echo "$commit_response" | jq -r '.commit.author.name')
#               commit_message=$(echo "$commit_response" | jq -r '.commit.message')
              
#               echo "Commit $commit_sha by $author_name: \"$commit_message\" triggered a build that ${conclusion}."
#             done
#           fi
